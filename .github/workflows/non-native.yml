# Copyright (C) Viktor Szakats
#
# SPDX-License-Identifier: curl

name: non-native

'on':
  push:
    branches:
      - master
      - '*/ci'
    paths-ignore:
      - '**/*.md'
      - '.circleci/**'
      - 'appveyor.*'
      - 'packages/**'
      - 'plan9/**'
      - 'projects/**'
      - 'winbuild/**'
  pull_request:
    branches:
      - master
    paths-ignore:
      - '**/*.md'
      - '.circleci/**'
      - 'appveyor.*'
      - 'packages/**'
      - 'plan9/**'
      - 'projects/**'
      - 'winbuild/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

permissions: {}

jobs:
  android:
    name: "Android ${{ matrix.platform }} (${{ matrix.build == 'cmake' && 'CM' || 'AM' }}, arm64)"
    runs-on: 'ubuntu-latest'
    timeout-minutes: 25
    env:
      VCPKG_BINARY_SOURCES: 'clear;x-gha,readwrite'
      VCPKG_DISABLE_METRICS: '1'
    strategy:
      matrix:
        include:
          - { build: 'autotools', platform: '21' }
          - { build: 'cmake'    , platform: '21', install: 'libpsl' }
          - { build: 'autotools', platform: '35' }
          - { build: 'cmake'    , platform: '35', install: 'libpsl' }
      fail-fast: false
    steps:
      - name: 'vcpkg cache setup'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: 'vcpkg versions'
        timeout-minutes: 1
        run: |
          git -C "$VCPKG_INSTALLATION_ROOT" show --no-patch --format='%H %ai'
          vcpkg version

      - name: 'vcpkg build'
        if: ${{ matrix.install }}
        timeout-minutes: 20
        run: vcpkg x-set-installed ${{ matrix.install }} '--triplet=arm64-android'

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: 'configure'
        run: |
          if [ '${{ matrix.build }}' = 'cmake' ]; then
            cmake -B bld \
              -DANDROID_ABI=arm64-v8a \
              -DANDROID_PLATFORM=android-${{ matrix.platform }} \
              -DCMAKE_TOOLCHAIN_FILE="$VCPKG_INSTALLATION_ROOT/scripts/buildsystems/vcpkg.cmake" \
              -DVCPKG_INSTALLED_DIR="$VCPKG_INSTALLATION_ROOT/installed" \
              -DVCPKG_TARGET_TRIPLET=arm64-android' \
              -DVCPKG_CHAINLOAD_TOOLCHAIN_FILE="${ANDROID_NDK_HOME}/build/cmake/android.toolchain.cmake" \
              -DCMAKE_UNITY_BUILD=ON -DCURL_TEST_BUNDLES=ON \
              -DCURL_WERROR=ON \
              -DCURL_ENABLE_SSL=OFF
          else
            autoreconf -fi
            TOOLCHAIN="${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64"
            mkdir bld && cd bld && ../configure --disable-dependency-tracking --enable-unity --enable-test-bundles --enable-warnings --enable-werror \
              CC="$TOOLCHAIN/bin/aarch64-linux-android${{ matrix.platform }}-clang" \
              AR="$TOOLCHAIN/bin/llvm-ar" \
              RANLIB="$TOOLCHAIN/bin/llvm-ranlib" \
              --host=aarch64-linux-android${{ matrix.platform }} \
              --without-ssl \
              --without-libpsl
          fi

      - name: 'configure log'
        if: ${{ !cancelled() }}
        run: cat bld/config.log bld/CMakeFiles/CMake*.yaml 2>/dev/null || true

      - name: 'curl_config.h'
        run: |
          echo '::group::raw'; cat bld/lib/curl_config.h || true; echo '::endgroup::'
          grep -F '#define' bld/lib/curl_config.h | sort || true

      - name: 'build'
        run: |
          if [ '${{ matrix.build }}' = 'cmake' ]; then
            cmake --build bld
          else
            make -j5 -C bld
          fi

      - name: 'curl info'
        run: |
          find . -type f \( -name curl -o -name '*.so' -o -name '*.a' \) -exec file '{}' \;

      - name: 'build tests'
        if: ${{ matrix.build == 'cmake' }}  # skip for autotools to save time
        run: |
          if [ '${{ matrix.build }}' = 'cmake' ]; then
            cmake --build bld --target testdeps
          else
            make -j5 -C bld -C tests
          fi

      - name: 'build examples'
        if: ${{ matrix.build == 'cmake' }}  # skip for autotools to save time
        run: |
          if [ '${{ matrix.build }}' = 'cmake' ]; then
            cmake --build bld --target curl-examples
          else
            make -j5 -C bld examples
          fi
